library(knitr)
kable()
help(kable)
library(biomaRt)
library(knitr)
source('Rscripts/Utils.R')
#Cleaning chromMAGMA Outputs.
.ensembl <- useEnsembl_GRCh37()
x <- read_final_gene_results()
#x$GENE[x$FEATURE == 'snp_to_genes'] <- x$originalfeature[x$FEATURE == 'snp_to_genes']
genes <- unique(sort(x$GENE))
### ensembl_gene_id
i <- startsWith(x = genes, prefix = 'ENSG') & nchar(genes) == 15
df.1 <- data.frame(GENE = genes[i], ensembl_gene_id = genes[i])
genes <- genes[!i]
### external_gene_name
bm <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name', 'gene_biotype'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
bm <- bm[!is.na(bm$external_gene_name),]
ensembl_gene_id <- lapply(genes, function(g){
return(bm$ensembl_gene_id[bm$external_gene_name == g])
})
i <- lapply(ensembl_gene_id, length) == 1
df.2 <- data.frame(GENE = genes[i], ensembl_gene_id = unlist(ensembl_gene_id[i]))
genes <- genes[!i]
### external_synonym
bm <- getBM(attributes = c('ensembl_gene_id', 'external_synonym', 'gene_biotype'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
bm <- bm[!is.na(bm$external_synonym),]
ensembl_gene_id <- lapply(genes, function(g){
return(bm$ensembl_gene_id[bm$external_synonym == g])
})
i <- lapply(ensembl_gene_id, length) == 1
df.3 <- data.frame(GENE = genes[i], ensembl_gene_id = unlist(ensembl_gene_id[i]))
genes <- genes[!i]
### hgnc_symbol
bm <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol', 'gene_biotype'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
bm <- bm[!is.na(bm$hgnc_symbol),]
ensembl_gene_id <- lapply(genes, function(g){
return(bm$ensembl_gene_id[bm$hgnc_symbol == g])
})
i <- lapply(ensembl_gene_id, length) == 1
df.4 <- data.frame(GENE = genes[i], ensembl_gene_id = unlist(ensembl_gene_id[i]))
genes <- genes[!i]
### entrezgene_id
bm <- getBM(attributes = c('ensembl_gene_id', 'entrezgene_id', 'gene_biotype'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
bm <- bm[!is.na(bm$entrezgene_id),]
ensembl_gene_id <- lapply(genes, function(g){
return(bm$ensembl_gene_id[paste0('LOC',bm$entrezgene_id) == g])
})
i <- lapply(ensembl_gene_id, length) == 1
df.5 <- data.frame(GENE = genes[i], ensembl_gene_id = unlist(ensembl_gene_id[i]))
genes <- genes[!i]
### uniprot_gn_symbol
bm <- getBM(attributes = c('ensembl_gene_id', 'uniprot_gn_symbol', 'gene_biotype'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
bm <- bm[!is.na(bm$uniprot_gn_symbol),]
ensembl_gene_id <- lapply(genes, function(g){
return(bm$ensembl_gene_id[bm$uniprot_gn_symbol == g])
})
i <- lapply(ensembl_gene_id, length) == 1
df.6 <- data.frame(GENE = genes[i], ensembl_gene_id = unlist(ensembl_gene_id[i]))
genes <- genes[!i]
df <- rbind(df.1, df.2, df.3, df.4, df.5, df.6)
x <- merge(x = x, y = df, by = 'GENE', all.x = T)
bm <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name', 'gene_biotype','chromosome_name','start_position','end_position'), mart = .ensembl, filters = 'chromosome_name', values = c(1:22,'X')); bm <- bm[bm$gene_biotype == 'protein_coding',]
x <- merge(x = x, y = bm, by = 'ensembl_gene_id', all.x = T)
knitr::kable(x)
str(x)
source('Rscripts/Utils.R')
getwd()
source('Rscripts/Utils.R')
getwd(0)
getwd()
source('Utils.R')
source('Rscripts/Utils.R')
source('Rscripts/Utils.R')
source('Rscripts/Utils.R')
knit_with_parameters('~/Lawrensonlab/Projects/chromMAGMA/Analysis/Rscripts/01_getEnsemblGeneId.Rmd')
gene_file <- read_gene_level()
wBin <- read_wBin()
PosGenes <- read_PosGenes()
library(tidyverse)
library(valr)
library(reshape2)
library(ggridges)
library(RColorBrewer)
library(biomaRt)
library(ggpubr)
library(UpSetR)
source('Rscripts/Utils.R')
gene_file <- read_gene_level()
wBin <- read_wBin()
PosGenes <- read_PosGenes()
setwd("~/Lawrensonlab/Projects/chromMAGMA/Analysis")
source('Rscripts/Utils.R')
gene_file <- read_gene_level()
wBin <- read_wBin()
PosGenes <- read_PosGenes()
